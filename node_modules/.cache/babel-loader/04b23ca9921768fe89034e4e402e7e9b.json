{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vinay/sorry/src/Text.js\";\nimport React, { Component } from \"react\";\nimport $ from \"jquery\";\nimport \"./text.css\";\nimport { Helmet } from \"react-helmet\";\n\nclass Texter extends Component {\n  // CLASSES\n  //  Shard =(x, y, hue) =>{\n  //     this.x = x;\n  //     this.y = y;\n  //     this.hue = hue;\n  //     this.lightness = 50;\n  //     this.size = 15 + Math.random() * 10;\n  //     const angle = Math.random() * 2 * Math.PI;\n  //     const blastSpeed = 1 + Math.random() * 6;\n  //     this.xSpeed = Math.cos(angle) * blastSpeed;\n  //     this.ySpeed = Math.sin(angle) * blastSpeed;\n  //     this.target = getTarget();\n  //     this.ttl = 100;\n  //     this.timer = 0;\n  //   draw=() =>{\n  //     ctx2.fillStyle = `hsl(${this.hue}, 100%, ${this.lightness}%)`;\n  //     ctx2.beginPath();\n  //     ctx2.arc(this.x, this.y, this.size, 0, 2 * Math.PI);\n  //     ctx2.closePath();\n  //     ctx2.fill();\n  //   }\n  //   update=() =>{\n  //     if (this.target) {\n  //       const dx = this.target.x - this.x;\n  //       const dy = this.target.y - this.y;\n  //       const dist = Math.sqrt(dx * dx + dy * dy);\n  //       const a = Math.atan2(dy, dx);\n  //       const tx = Math.cos(a) * 5;\n  //       const ty = Math.sin(a) * 5;\n  //       this.size = lerp(this.size, 1.5, 0.05);\n  //       if (dist < 5) {\n  //         this.lightness = lerp(this.lightness, 100, 0.01);\n  //         this.xSpeed = this.ySpeed = 0;\n  //         this.x = lerp(this.x, this.target.x + fidelity / 2, 0.05);\n  //         this.y = lerp(this.y, this.target.y + fidelity / 2, 0.05);\n  //         this.timer += 1;\n  //       } else if (dist < 10) {\n  //         this.lightness = lerp(this.lightness, 100, 0.01);\n  //         this.xSpeed = lerp(this.xSpeed, tx, 0.1);\n  //         this.ySpeed = lerp(this.ySpeed, ty, 0.1);\n  //         this.timer += 1;\n  //       } else {\n  //         this.xSpeed = lerp(this.xSpeed, tx, 0.02);\n  //         this.ySpeed = lerp(this.ySpeed, ty, 0.02);\n  //       }\n  //     } else {\n  //       this.ySpeed += 0.05;\n  //       //this.xSpeed = lerp(this.xSpeed, 0, 0.1);\n  //       this.size = lerp(this.size, 1, 0.05);\n  //       if (this.y > c2.height) {\n  //         shards.forEach((shard, idx) => {\n  //           if (shard === this) {\n  //             shards.splice(idx, 1);\n  //           }\n  //         });\n  //       }\n  //     }\n  //     this.x = this.x + this.xSpeed;\n  //     this.y = this.y + this.ySpeed;\n  //   }\n  // }\n  //  Rocket =()=>{\n  //     const quarterW = c2.width / 4;\n  //     this.x = quarterW + Math.random() * (c2.width - quarterW);\n  //     this.y = c2.height - 15;\n  //     this.angle = (Math.random() * Math.PI) / 4 - Math.PI / 6;\n  //     this.blastSpeed = 6 + Math.random() * 7;\n  //     this.shardCount = 15 + Math.floor(Math.random() * 15);\n  //     this.xSpeed = Math.sin(this.angle) * this.blastSpeed;\n  //     this.ySpeed = -Math.cos(this.angle) * this.blastSpeed;\n  //     this.hue = Math.floor(Math.random() * 360);\n  //     this.trail = [];\n  //   draw=() =>{\n  //     ctx2.save();\n  //     ctx2.translate(this.x, this.y);\n  //     ctx2.rotate(Math.atan2(this.ySpeed, this.xSpeed) + Math.PI / 2);\n  //     ctx2.fillStyle = `hsl(${this.hue}, 100%, 50%)`;\n  //     ctx2.fillRect(0, 0, 5, 15);\n  //     ctx2.restore();\n  //   }\n  //   update=()=> {\n  //     this.x = this.x + this.xSpeed;\n  //     this.y = this.y + this.ySpeed;\n  //     this.ySpeed += 0.1;\n  //   }\n  //   explode=()=> {\n  //     for (let i = 0; i < 70; i++) {\n  //       shards.push(new Shard(this.x, this.y, this.hue));\n  //     }\n  //   }\n  // }\n  // // INITIALIZATION\n  // const [c1, c2, c3] = document.querySelectorAll(\"canvas\");\n  // const [ctx1, ctx2, ctx3] = [c1, c2, c3].map((c) => c.getContext(\"2d\"));\n  // let fontSize = 200;\n  // const rockets = [];\n  // const shards = [];\n  // const targets = [];\n  // const fidelity = 3;\n  // let counter = 0;\n  // c2.width = c3.width = window.innerWidth;\n  // c2.height = c3.height = window.innerHeight;\n  // ctx1.fillStyle = \"#000\";\n  // const text = \"HAPPY MONTHIVERSRY\";\n  // let textWidth = 99999999;\n  // while (textWidth > window.innerWidth) {\n  //   ctx1.font = `900 ${fontSize--}px Arial`;\n  //   textWidth = ctx1.measureText(text).width;\n  // }\n  // c1.width = textWidth;\n  // c1.height = fontSize * 1.5;\n  // ctx1.font = `900 ${fontSize}px Arial`;\n  // ctx1.fillText(text, 0, fontSize);\n  // const imgData = ctx1.getImageData(0, 0, c1.width, c1.height);\n  // for (let i = 0, max = imgData.data.length; i < max; i += 4) {\n  //   const alpha = imgData.data[i + 3];\n  //   const x = Math.floor(i / 4) % imgData.width;\n  //   const y = Math.floor(i / 4 / imgData.width);\n  //   if (alpha && x % fidelity === 0 && y % fidelity === 0) {\n  //     targets.push({ x, y });\n  //   }\n  // }\n  // ctx3.fillStyle = \"#FFF\";\n  // ctx3.shadowColor = \"#FFF\";\n  // ctx3.shadowBlur = 25;\n  // // ANIMATION LOOP\n  // (function loop() {\n  //   ctx2.fillStyle = \"rgba(0, 0, 0, .1)\";\n  //   ctx2.fillRect(0, 0, c2.width, c2.height);\n  //   //ctx2.clearRect(0, 0, c2.width, c2.height);\n  //   counter += 1;\n  //   if (counter % 15 === 0) {\n  //     rockets.push(new Rocket());\n  //   }\n  //   rockets.forEach((r, i) => {\n  //     r.draw();\n  //     r.update();\n  //     if (r.ySpeed > 0) {\n  //       r.explode();\n  //       rockets.splice(i, 1);\n  //     }\n  //   });\n  //   shards.forEach((s, i) => {\n  //     s.draw();\n  //     s.update();\n  //     if (s.timer >= s.ttl || s.lightness >= 99) {\n  //       ctx3.fillRect(s.target.x, s.target.y, fidelity + 1, fidelity + 1);\n  //       shards.splice(i, 1);\n  //     }\n  //   });\n  //   requestAnimationFrame(loop);\n  // })();\n  // // HELPER FUNCTIONS\n  // const lerp = (a, b, t) => (Math.abs(b - a) > 0.1 ? a + t * (b - a) : b);\n  // function getTarget() {\n  //   if (targets.length > 0) {\n  //     const idx = Math.floor(Math.random() * targets.length);\n  //     let { x, y } = targets[idx];\n  //     targets.splice(idx, 1);\n  //     x += c2.width / 2 - textWidth / 2;\n  //     y += c2.height / 2 - fontSize / 2;\n  //     return { x, y };\n  //   }\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Helmet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Texter;","map":{"version":3,"sources":["/home/vinay/sorry/src/Text.js"],"names":["React","Component","$","Helmet","Texter","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAO,YAAP;AACA,SAAQC,MAAR,QAAqB,cAArB;;AACA,MAAMC,MAAN,SAAqBH,SAArwBAEE;AAAA,6BACN,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADM;AAAA;AAAA;AAAA;AAAA,YAFF;AAUD;;AArM4B;;AAuM/B,eAAeD,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport $ from \"jquery\"\nimport \"./text.css\";\nimport {Helmet} from \"react-helmet\"\nclass Texter extends Component {\n\n// CLASSES\n//  Shard =(x, y, hue) =>{\n//     this.x = x;\n//     this.y = y;\n//     this.hue = hue;\n//     this.lightness = 50;\n//     this.size = 15 + Math.random() * 10;\n//     const angle = Math.random() * 2 * Math.PI;\n//     const blastSpeed = 1 + Math.random() * 6;\n//     this.xSpeed = Math.cos(angle) * blastSpeed;\n//     this.ySpeed = Math.sin(angle) * blastSpeed;\n//     this.target = getTarget();\n//     this.ttl = 100;\n//     this.timer = 0;\n \n//   draw=() =>{\n//     ctx2.fillStyle = `hsl(${this.hue}, 100%, ${this.lightness}%)`;\n//     ctx2.beginPath();\n//     ctx2.arc(this.x, this.y, this.size, 0, 2 * Math.PI);\n//     ctx2.closePath();\n//     ctx2.fill();\n//   }\n//   update=() =>{\n//     if (this.target) {\n//       const dx = this.target.x - this.x;\n//       const dy = this.target.y - this.y;\n//       const dist = Math.sqrt(dx * dx + dy * dy);\n//       const a = Math.atan2(dy, dx);\n//       const tx = Math.cos(a) * 5;\n//       const ty = Math.sin(a) * 5;\n//       this.size = lerp(this.size, 1.5, 0.05);\n\n//       if (dist < 5) {\n//         this.lightness = lerp(this.lightness, 100, 0.01);\n//         this.xSpeed = this.ySpeed = 0;\n//         this.x = lerp(this.x, this.target.x + fidelity / 2, 0.05);\n//         this.y = lerp(this.y, this.target.y + fidelity / 2, 0.05);\n//         this.timer += 1;\n//       } else if (dist < 10) {\n//         this.lightness = lerp(this.lightness, 100, 0.01);\n//         this.xSpeed = lerp(this.xSpeed, tx, 0.1);\n//         this.ySpeed = lerp(this.ySpeed, ty, 0.1);\n//         this.timer += 1;\n//       } else {\n//         this.xSpeed = lerp(this.xSpeed, tx, 0.02);\n//         this.ySpeed = lerp(this.ySpeed, ty, 0.02);\n//       }\n//     } else {\n//       this.ySpeed += 0.05;\n//       //this.xSpeed = lerp(this.xSpeed, 0, 0.1);\n//       this.size = lerp(this.size, 1, 0.05);\n\n//       if (this.y > c2.height) {\n//         shards.forEach((shard, idx) => {\n//           if (shard === this) {\n//             shards.splice(idx, 1);\n//           }\n//         });\n//       }\n//     }\n//     this.x = this.x + this.xSpeed;\n//     this.y = this.y + this.ySpeed;\n//   }\n// }\n\n//  Rocket =()=>{\n//     const quarterW = c2.width / 4;\n//     this.x = quarterW + Math.random() * (c2.width - quarterW);\n//     this.y = c2.height - 15;\n//     this.angle = (Math.random() * Math.PI) / 4 - Math.PI / 6;\n//     this.blastSpeed = 6 + Math.random() * 7;\n//     this.shardCount = 15 + Math.floor(Math.random() * 15);\n//     this.xSpeed = Math.sin(this.angle) * this.blastSpeed;\n//     this.ySpeed = -Math.cos(this.angle) * this.blastSpeed;\n//     this.hue = Math.floor(Math.random() * 360);\n//     this.trail = [];\n//   draw=() =>{\n//     ctx2.save();\n//     ctx2.translate(this.x, this.y);\n//     ctx2.rotate(Math.atan2(this.ySpeed, this.xSpeed) + Math.PI / 2);\n//     ctx2.fillStyle = `hsl(${this.hue}, 100%, 50%)`;\n//     ctx2.fillRect(0, 0, 5, 15);\n//     ctx2.restore();\n//   }\n//   update=()=> {\n//     this.x = this.x + this.xSpeed;\n//     this.y = this.y + this.ySpeed;\n//     this.ySpeed += 0.1;\n//   }\n\n//   explode=()=> {\n//     for (let i = 0; i < 70; i++) {\n//       shards.push(new Shard(this.x, this.y, this.hue));\n//     }\n//   }\n// }\n\n// // INITIALIZATION\n// const [c1, c2, c3] = document.querySelectorAll(\"canvas\");\n// const [ctx1, ctx2, ctx3] = [c1, c2, c3].map((c) => c.getContext(\"2d\"));\n// let fontSize = 200;\n// const rockets = [];\n// const shards = [];\n// const targets = [];\n// const fidelity = 3;\n// let counter = 0;\n// c2.width = c3.width = window.innerWidth;\n// c2.height = c3.height = window.innerHeight;\n// ctx1.fillStyle = \"#000\";\n// const text = \"HAPPY MONTHIVERSRY\";\n// let textWidth = 99999999;\n\n// while (textWidth > window.innerWidth) {\n//   ctx1.font = `900 ${fontSize--}px Arial`;\n//   textWidth = ctx1.measureText(text).width;\n// }\n\n// c1.width = textWidth;\n// c1.height = fontSize * 1.5;\n// ctx1.font = `900 ${fontSize}px Arial`;\n// ctx1.fillText(text, 0, fontSize);\n// const imgData = ctx1.getImageData(0, 0, c1.width, c1.height);\n// for (let i = 0, max = imgData.data.length; i < max; i += 4) {\n//   const alpha = imgData.data[i + 3];\n//   const x = Math.floor(i / 4) % imgData.width;\n//   const y = Math.floor(i / 4 / imgData.width);\n\n//   if (alpha && x % fidelity === 0 && y % fidelity === 0) {\n//     targets.push({ x, y });\n//   }\n// }\n\n// ctx3.fillStyle = \"#FFF\";\n// ctx3.shadowColor = \"#FFF\";\n// ctx3.shadowBlur = 25;\n\n// // ANIMATION LOOP\n// (function loop() {\n//   ctx2.fillStyle = \"rgba(0, 0, 0, .1)\";\n//   ctx2.fillRect(0, 0, c2.width, c2.height);\n//   //ctx2.clearRect(0, 0, c2.width, c2.height);\n//   counter += 1;\n\n//   if (counter % 15 === 0) {\n//     rockets.push(new Rocket());\n//   }\n//   rockets.forEach((r, i) => {\n//     r.draw();\n//     r.update();\n//     if (r.ySpeed > 0) {\n//       r.explode();\n//       rockets.splice(i, 1);\n//     }\n//   });\n\n//   shards.forEach((s, i) => {\n//     s.draw();\n//     s.update();\n\n//     if (s.timer >= s.ttl || s.lightness >= 99) {\n//       ctx3.fillRect(s.target.x, s.target.y, fidelity + 1, fidelity + 1);\n//       shards.splice(i, 1);\n//     }\n//   });\n\n//   requestAnimationFrame(loop);\n// })();\n\n// // HELPER FUNCTIONS\n// const lerp = (a, b, t) => (Math.abs(b - a) > 0.1 ? a + t * (b - a) : b);\n\n// function getTarget() {\n//   if (targets.length > 0) {\n//     const idx = Math.floor(Math.random() * targets.length);\n//     let { x, y } = targets[idx];\n//     targets.splice(idx, 1);\n\n//     x += c2.width / 2 - textWidth / 2;\n//     y += c2.height / 2 - fontSize / 2;\n\n//     return { x, y };\n//   }\n// }\n\n  render() {\n    return (\n      \n      <div >\n<Helmet>\n\n</Helmet>\n        \n       \n      </div>\n    );\n  }\n}\nexport default Texter;\n"]},"metadata":{},"sourceType":"module"}